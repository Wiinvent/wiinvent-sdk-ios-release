// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name WISDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVKit
import Alamofire
import Foundation
import GoogleInteractiveMediaAds
import JavaScriptCore
import Swift
@_exported import WISDK
import WebKit
import _Concurrency
import _StringProcessing
@objc public protocol WIGameDelegate {
  @objc func onDismiss()
  @objc func onError()
  @objc func onTimeout()
}
@objc public class WIGameWebAction : ObjectiveC.NSObject {
  public enum TypeAction : Swift.String {
    case USER_DISMISS, UNKNOWN
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public init(payload: Swift.String)
  public func getType() -> WISDK.WIGameWebAction.TypeAction
  @objc deinit
}
@objc public protocol WIAdsInStreamLoaderDelegate {
  @objc func wiManagerRequestPlayContent()
  @objc func wiManagerRequestPauseContent()
  @objc func wiManagerRequestFailure()
  @objc func onEvent(event: WISDK.WIAdEvent)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class WIAdsInStreamManager : ObjectiveC.NSObject, GoogleInteractiveMediaAds.IMAAdsLoaderDelegate, GoogleInteractiveMediaAds.IMAAdsManagerDelegate {
  public class func shared() -> WISDK.WIAdsInStreamManager
  public var loaderDelegate: WISDK.WIAdsInStreamLoaderDelegate?
  @objc public enum AdsEnvironment : Swift.Int, Swift.RawRepresentable {
    case SANDBOX, PRODUCTION
    public typealias RawValue = Swift.String
    public var rawValue: WISDK.WIAdsInStreamManager.AdsEnvironment.RawValue {
      get
    }
    public init?(rawValue: WISDK.WIAdsInStreamManager.AdsEnvironment.RawValue)
  }
  @objc public enum LevelLog : Swift.Int, Swift.RawRepresentable {
    case NODE, BODY
    public typealias RawValue = Swift.String
    public var rawValue: WISDK.WIAdsInStreamManager.LevelLog.RawValue {
      get
    }
    public init?(rawValue: WISDK.WIAdsInStreamManager.LevelLog.RawValue)
  }
  @objc public func initInstream(accountId: Swift.Int, env: WISDK.WIAdsInStreamManager.AdsEnvironment, timeoutInSecond: Swift.Int64, logLevel: WISDK.WIAdsInStreamManager.LevelLog)
  @objc public func requestAds(requestData: WISDK.WIAdsRequestData, player: AVFoundation.AVPlayer, adContainer: UIKit.UIView, viewController: UIKit.UIViewController)
  @objc public func adsLoader(_ loader: GoogleInteractiveMediaAds.IMAAdsLoader, adsLoadedWith adsLoadedData: GoogleInteractiveMediaAds.IMAAdsLoadedData)
  @objc public func adsLoader(_ loader: GoogleInteractiveMediaAds.IMAAdsLoader, failedWith adErrorData: GoogleInteractiveMediaAds.IMAAdLoadingErrorData)
  @objc public func adsManager(_ adsManager: GoogleInteractiveMediaAds.IMAAdsManager, didReceive event: GoogleInteractiveMediaAds.IMAAdEvent)
  @objc public func adsManagerDidRequestContentPause(_ adsManager: GoogleInteractiveMediaAds.IMAAdsManager)
  @objc public func adsManagerDidRequestContentResume(_ adsManager: GoogleInteractiveMediaAds.IMAAdsManager)
  @objc public func adsManager(_ adsManager: GoogleInteractiveMediaAds.IMAAdsManager, didReceive error: GoogleInteractiveMediaAds.IMAAdError)
  public func release()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class WIOverlayManager : ObjectiveC.NSObject {
  @objc public static var onConfigReady: ((_ configData: WISDK.WIConfigData) -> ())?
  @objc public static var onOverlayTimeout: (() -> ())?
  @objc public static var onOverlayError: (() -> ())?
  @objc public static var onOverlayStart: (() -> ())?
  @objc public static var onOverlayCompleted: (() -> ())?
  @objc public static var onTokenExpire: (() -> ())?
  @objc public static var onUserLogin: (() -> ())?
  @objc public static var onDisplayOverlay: ((_ isDisplay: Swift.Bool) -> ())?
  @objc public static var onProfileClose: (() -> ())?
  @objc public static var onVideoDetail: ((_ videoId: Swift.String, _ isLiveStream: Swift.Bool) -> ())?
  @objc public static var onCategoryDetail: ((_ categoryId: Swift.String) -> ())?
  @objc public static var onAdsRequestStart: ((_ campaignId: Swift.String) -> ())?
  @objc public static var onAdsRequestSuccess: ((_ campaignId: Swift.String) -> ())?
  @objc public static var onAdsRequestError: ((_ campaignId: Swift.String, _ error: Swift.String) -> ())?
  @objc public static var onAdsEvent: ((_ event: WISDK.WIAdEvent) -> ())?
  @objc public static func monitorAVPlayer(player: AVFoundation.AVPlayer?)
  @objc public static func unmonitorAVPlayer()
  @objc public static func addOverlaysToPlayerView(container: UIKit.UIView!, overlayData: WISDK.WIOverlayData!)
  @objc public static func removeOverlays()
  @objc public static func onUserPurchaseSuccess(token: Swift.String, productId: Swift.String)
  @objc public static func onUserPurchaseError(errorCode: Swift.String)
  @objc public static func requestAds()
  @objc public static func requestAdsWithVastLink(vastLink: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc open class WIAdEvent : ObjectiveC.NSObject {
  @objc public enum AdEventType : Swift.Int, Swift.RawRepresentable {
    case REQUEST, START, IMPRESSION, CLICK, COMPLETE, SKIPPED, USER_AD_BLOCK, VOLUME_MUTED, VOLUME_ON, ERROR, UNKNOW
    public typealias RawValue = Swift.String
    public var rawValue: WISDK.WIAdEvent.AdEventType.RawValue {
      get
    }
    public init?(rawValue: WISDK.WIAdEvent.AdEventType.RawValue)
  }
  @objc override dynamic public init()
  public init(event: [Swift.String : Any]?)
  @objc public func getEventData(key: Swift.String) -> Swift.String
  @objc public func getCampaignId() -> Swift.String
  @objc public func getDuration() -> Swift.String
  @objc public func isLinear() -> Swift.Bool
  @objc public func getErrorCode() -> Swift.Int
  @objc public func getErrorMessage() -> Swift.String
  @objc public func getEventType() -> WISDK.WIAdEvent.AdEventType
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class WIGameManager : ObjectiveC.NSObject {
  public class func shared() -> WISDK.WIGameManager
  @objc public func addGameView(container: UIKit.UIView!, data: WISDK.WIGameData!, gameDelegate: WISDK.WIGameDelegate)
  @objc public func removeGameView()
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class WIStreamSource : ObjectiveC.NSObject {
  @objc final public let url: Foundation.URL?
  @objc final public let mineType: Swift.String?
  @objc deinit
}
@objc public class WIWebAction : ObjectiveC.NSObject {
  public enum TypeAction : Swift.String {
    case LOAD_CONFIG_SUCCESS, OVERLAY_VISIBILITY_CHANGE, USER_VOTED, USER_PURCHASE, TOKEN_EXPIRE, LOGIN, CLOSE_PROFILE_PAGE, DETAIL_VIDEO, DETAIL_CATEGORY, OVELAY_DISPLAY, START_OVERLAY, OVERLAY_COMPLETED, ADS_REQUEST_START, ADS_REQUEST_SUCCESS, ADS_REQUEST_ERROR, ADS_EVENT, UNKNOWN
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public init(payload: Swift.String)
  public func getType() -> WISDK.WIWebAction.TypeAction
  @objc deinit
}
@objc public class WIAdsRequestData : ObjectiveC.NSObject {
  @objc public init(channelId: Swift.String? = nil, streamId: Swift.String? = nil)
  @objc deinit
}
@objc public class WIOverlayData : ObjectiveC.NSObject {
  @objc public init(channelId: Swift.String?, streamId: Swift.String?, contentType: WISDK.WIOverlayData.ContentType, env: WISDK.WIOverlayData.Environment = Environment.PRODUCTION)
  @objc public init(channelId: Swift.String?, streamId: Swift.String?, contentType: WISDK.WIOverlayData.ContentType, platform: WISDK.WIOverlayData.Platform?, env: WISDK.WIOverlayData.Environment = Environment.PRODUCTION)
  @objc public init(channelId: Swift.String?, streamId: Swift.String?, thirdPartyToken: Swift.String?, contentType: WISDK.WIOverlayData.ContentType, accountId: Swift.Int, platform: WISDK.WIOverlayData.Platform?, env: WISDK.WIOverlayData.Environment = Environment.PRODUCTION)
  @objc public init(channelId: Swift.String?, streamId: Swift.String?, thirdPartyToken: Swift.String?, contentType: WISDK.WIOverlayData.ContentType, accountId: Swift.Int, platform: WISDK.WIOverlayData.Platform?, env: WISDK.WIOverlayData.Environment = Environment.PRODUCTION, timeoutSecond: Swift.Int = 0)
  @objc public init(type: WISDK.WIOverlayData.OverlayType, accountId: Swift.Int, thirdPartyToken: Swift.String?, env: WISDK.WIOverlayData.Environment = Environment.PRODUCTION)
  @objc public enum Environment : Swift.Int, Swift.RawRepresentable {
    case DEV, LOCAL, STAGING, SANDBOX, PRODUCTION
    public typealias RawValue = Swift.String
    public var rawValue: WISDK.WIOverlayData.Environment.RawValue {
      get
    }
    public init?(rawValue: WISDK.WIOverlayData.Environment.RawValue)
  }
  @objc @_hasMissingDesignatedInitializers public class Platform : ObjectiveC.NSObject {
    @objc deinit
  }
  @objc public enum ContentType : Swift.Int, Swift.RawRepresentable {
    case VOD, LIVESTREAM
    public typealias RawValue = Swift.String
    public var rawValue: WISDK.WIOverlayData.ContentType.RawValue {
      get
    }
    public init?(rawValue: WISDK.WIOverlayData.ContentType.RawValue)
  }
  @objc public enum OverlayType : Swift.Int, Swift.RawRepresentable {
    case PROFILE, OVERLAY
    public typealias RawValue = Swift.String
    public var rawValue: WISDK.WIOverlayData.OverlayType.RawValue {
      get
    }
    public init?(rawValue: WISDK.WIOverlayData.OverlayType.RawValue)
  }
  @objc deinit
}
@objc public class WIConfigData : ObjectiveC.NSObject {
  @objc public var sources: [WISDK.WIStreamSource]?
  @objc final public let isVod: Swift.Bool
  public init(data: [Swift.String : Any]?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class PassthroughView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) open var isUserGestureEnabled: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func point(inside point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class WIOverlayView : WISDK.PassthroughView, WebKit.WKScriptMessageHandler, WebKit.WKNavigationDelegate, WebKit.WKUIDelegate, UIKit.UIScrollViewDelegate {
  @_Concurrency.MainActor(unsafe) open var mWebView: WebKit.WKWebView!
  @_Concurrency.MainActor(unsafe) open var currentOverlay: Swift.Int
  @_Concurrency.MainActor(unsafe) open var mWebViewError: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var mWebViewReady: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc public func scrollViewWillBeginZooming(_ scrollView: UIKit.UIScrollView, with view: UIKit.UIView?)
  @_Concurrency.MainActor(unsafe) public func injectJavascript(javascript: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc open func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
  @_Concurrency.MainActor(unsafe) @objc public func webView(_ webView: WebKit.WKWebView, didStartProvisionalNavigation navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor(unsafe) @objc public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor(unsafe) @objc public func webView(_ webView: WebKit.WKWebView, didFail navigation: WebKit.WKNavigation!, withError error: Swift.Error)
  @_Concurrency.MainActor(unsafe) @objc public func webView(_ webView: WebKit.WKWebView, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc public func webView(_ webView: WebKit.WKWebView, createWebViewWith configuration: WebKit.WKWebViewConfiguration, for navigationAction: WebKit.WKNavigationAction, windowFeatures: WebKit.WKWindowFeatures) -> WebKit.WKWebView?
  @_Concurrency.MainActor(unsafe) @objc public func webViewDidClose(_ webView: WebKit.WKWebView)
  @_Concurrency.MainActor(unsafe) public func clearAll()
  @objc deinit
}
@objc public class WIGameData : ObjectiveC.NSObject {
  @objc public init(accountId: Swift.String?, channelId: Swift.String?, streamId: Swift.String?, token: Swift.String?, env: WISDK.WIGameData.Environment)
  @objc public enum Environment : Swift.Int, Swift.RawRepresentable {
    case SANDBOX, PRODUCTION
    public typealias RawValue = Swift.String
    public var rawValue: WISDK.WIGameData.Environment.RawValue {
      get
    }
    public init?(rawValue: WISDK.WIGameData.Environment.RawValue)
  }
  @objc deinit
}
extension WISDK.WIGameWebAction.TypeAction : Swift.Equatable {}
extension WISDK.WIGameWebAction.TypeAction : Swift.Hashable {}
extension WISDK.WIGameWebAction.TypeAction : Swift.RawRepresentable {}
extension WISDK.WIAdsInStreamManager.AdsEnvironment : Swift.Equatable {}
extension WISDK.WIAdsInStreamManager.AdsEnvironment : Swift.Hashable {}
extension WISDK.WIAdsInStreamManager.LevelLog : Swift.Equatable {}
extension WISDK.WIAdsInStreamManager.LevelLog : Swift.Hashable {}
extension WISDK.WIAdEvent.AdEventType : Swift.Equatable {}
extension WISDK.WIAdEvent.AdEventType : Swift.Hashable {}
extension WISDK.WIWebAction.TypeAction : Swift.Equatable {}
extension WISDK.WIWebAction.TypeAction : Swift.Hashable {}
extension WISDK.WIWebAction.TypeAction : Swift.RawRepresentable {}
extension WISDK.WIOverlayData.Environment : Swift.Equatable {}
extension WISDK.WIOverlayData.Environment : Swift.Hashable {}
extension WISDK.WIOverlayData.ContentType : Swift.Equatable {}
extension WISDK.WIOverlayData.ContentType : Swift.Hashable {}
extension WISDK.WIOverlayData.OverlayType : Swift.Equatable {}
extension WISDK.WIOverlayData.OverlayType : Swift.Hashable {}
extension WISDK.WIGameData.Environment : Swift.Equatable {}
extension WISDK.WIGameData.Environment : Swift.Hashable {}
