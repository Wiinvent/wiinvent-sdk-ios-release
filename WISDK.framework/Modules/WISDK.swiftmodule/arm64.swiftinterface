// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1.2 effective-4.2 (swiftlang-1100.0.278 clang-1100.0.33.9)
// swift-module-flags: -target arm64-apple-ios9.0 -enable-objc-interop -enable-library-evolution -swift-version 4.2 -enforce-exclusivity=checked -O -module-name WISDK
import AVKit
import Foundation
import JavaScriptCore
import Swift
import WebKit
@objc public class WIStreamSource : ObjectiveC.NSObject {
  @objc final public let url: Foundation.URL?
  @objc final public let mineType: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@objc open class WISDK : ObjectiveC.NSObject {
  @objc public static var onConfigReady: ((WISDK.WIConfigData) -> ())?
  @objc public static var onVoted: ((Swift.String, Swift.String, Swift.String?, Swift.String, Swift.Int) -> ())?
  @objc public static var onUserPurchase: ((Swift.String, Swift.Int) -> ())?
  @objc public static func monitorAVPlayer(player: AVFoundation.AVPlayer?)
  @objc public static func unmonitorAVPlayer()
  @objc public static func addOverlaysToPlayerView(container: UIKit.UIView!, overlayData: WISDK.WIOverlayData!)
  @objc public static func onUserPurchaseSuccess(userId: Swift.String, productId: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@objc public class WIOverlayData : ObjectiveC.NSObject {
  @objc public init(channelId: Swift.String?, streamId: Swift.String?, env: WISDK.WIOverlayData.Environment = Environment.PRODUCTION, debug: Swift.Bool = false)
  @objc public init(channelId: Swift.String?, streamId: Swift.String?, platform: WISDK.WIOverlayData.Platform?, env: WISDK.WIOverlayData.Environment = Environment.PRODUCTION, debug: Swift.Bool = false)
  @objc public init(channelId: Swift.String?, streamId: Swift.String?, thirdPartyToken: Swift.String?, platform: WISDK.WIOverlayData.Platform?, env: WISDK.WIOverlayData.Environment = Environment.PRODUCTION, deviceType: WISDK.WIOverlayData.DeviceType = DeviceType.PHONE, debug: Swift.Bool = false)
  @objc public enum DeviceType : Swift.Int, Swift.RawRepresentable {
    case PHONE, TV
    public typealias RawValue = Swift.String
    public var rawValue: WISDK.WIOverlayData.DeviceType.RawValue {
      get
    }
    public init?(rawValue: WISDK.WIOverlayData.DeviceType.RawValue)
  }
  @objc public enum Environment : Swift.Int, Swift.RawRepresentable {
    case DEV, STAGING, PRODUCTION
    public typealias RawValue = Swift.String
    public var rawValue: WISDK.WIOverlayData.Environment.RawValue {
      get
    }
    public init?(rawValue: WISDK.WIOverlayData.Environment.RawValue)
  }
  @objc public class Platform : ObjectiveC.NSObject {
    @objc override dynamic public init()
    @objc deinit
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc public class WIConfigData : ObjectiveC.NSObject {
  @objc public var sources: [WISDK.WIStreamSource]?
  @objc final public let isVod: Swift.Bool
  public init(data: [Swift.String : Any]?)
  @objc override dynamic public init()
  @objc deinit
}
@objc public class WIWebAction : ObjectiveC.NSObject {
  public enum TypeAction : Swift.String {
    case LOAD_CONFIG_SUCCESS, OVERLAY_VISIBILITY_CHANGE, USER_VOTED, USER_PURCHASE, UNKNOWN
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public init(payload: Swift.String)
  public func getType() -> WISDK.WIWebAction.TypeAction
  @objc override dynamic public init()
  @objc deinit
}
@objc open class PassthroughView : UIKit.UIView {
  open var isUserGestureEnabled: Swift.Bool
  @objc override dynamic public func point(inside point: CoreGraphics.CGPoint, with event: UIKit.UIEvent?) -> Swift.Bool
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc public class WIOverlayView : WISDK.PassthroughView, WebKit.WKScriptMessageHandler, WebKit.WKNavigationDelegate, WebKit.WKUIDelegate {
  open var mWebView: WebKit.WKWebView!
  open var mWebViewError: Swift.Bool {
    get
    set
  }
  open var mWebViewReady: Swift.Bool {
    get
    set
  }
  public func injectJavascript(javascript: Swift.String)
  @objc open func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
  @objc public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @objc public func webView(_ webView: WebKit.WKWebView, didStartProvisionalNavigation navigation: WebKit.WKNavigation!)
  @objc public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @objc public func webView(_ webView: WebKit.WKWebView, didFail navigation: WebKit.WKNavigation!, withError error: Swift.Error)
  @objc public func webView(_ webView: WebKit.WKWebView, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  @objc public func webView(_ webView: WebKit.WKWebView, createWebViewWith configuration: WebKit.WKWebViewConfiguration, for navigationAction: WebKit.WKNavigationAction, windowFeatures: WebKit.WKWindowFeatures) -> WebKit.WKWebView?
  @objc public func webViewDidClose(_ webView: WebKit.WKWebView)
  @objc deinit
}
extension WISDK.WIOverlayData.DeviceType : Swift.Equatable {}
extension WISDK.WIOverlayData.DeviceType : Swift.Hashable {}
extension WISDK.WIOverlayData.Environment : Swift.Equatable {}
extension WISDK.WIOverlayData.Environment : Swift.Hashable {}
extension WISDK.WIWebAction.TypeAction : Swift.Equatable {}
extension WISDK.WIWebAction.TypeAction : Swift.Hashable {}
extension WISDK.WIWebAction.TypeAction : Swift.RawRepresentable {}
