// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
// swift-module-flags: -target armv7-apple-ios9.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name WISDK
import AVKit
import Foundation
import JavaScriptCore
import Swift
@_exported import WISDK
import WebKit
@_inheritsConvenienceInitializers @objc open class WISDK : ObjectiveC.NSObject {
  @objc public static var onConfigReady: ((WISDK.WIConfigData) -> ())?
  @objc public static var onOverlayTimeout: (() -> ())?
  @objc public static var onOverlayError: (() -> ())?
  @objc public static var onOverlayStart: (() -> ())?
  @objc public static var onOverlayCompleted: (() -> ())?
  @objc public static var onTokenExpire: (() -> ())?
  @objc public static var onUserLogin: (() -> ())?
  @objc public static var onDisplayOverlay: ((Swift.Bool) -> ())?
  @objc public static var onProfileClose: (() -> ())?
  @objc public static var onVideoDetail: ((Swift.String, Swift.Bool) -> ())?
  @objc public static var onCategoryDetail: ((Swift.String) -> ())?
  @objc public static var onAdsRequestStart: ((Swift.String) -> ())?
  @objc public static var onAdsRequestSuccess: ((Swift.String) -> ())?
  @objc public static var onAdsRequestError: ((Swift.String, Swift.String) -> ())?
  @objc public static var onAdsEvent: ((WISDK.WIAdEvent) -> ())?
  @objc public static func monitorAVPlayer(player: AVFoundation.AVPlayer?)
  @objc public static func unmonitorAVPlayer()
  @objc public static func addOverlaysToPlayerView(container: UIKit.UIView!, overlayData: WISDK.WIOverlayData!)
  @objc public static func removeOverlays()
  @objc public static func onUserPurchaseSuccess(token: Swift.String, productId: Swift.String)
  @objc public static func onUserPurchaseError(errorCode: Swift.String)
  @objc public static func requestAds()
  @objc public static func requestAdsWithVastLink(vastLink: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@objc open class WIAdEvent : ObjectiveC.NSObject {
  @objc public enum AdEventType : Swift.Int, Swift.RawRepresentable {
    case REQUEST, START, IMPRESSION, CLICK, COMPLETE, SKIPPED, USER_AD_BLOCK, VOLUME_MUTED, VOLUME_ON, ERROR, UNKNOW
    public typealias RawValue = Swift.String
    public var rawValue: WISDK.WIAdEvent.AdEventType.RawValue {
      get
    }
    public init?(rawValue: WISDK.WIAdEvent.AdEventType.RawValue)
  }
  public init(event: [Swift.String : Any]?)
  @objc public func getEventData(key: Swift.String) -> Swift.String
  @objc public func getCampaignId() -> Swift.String
  @objc public func getDuration() -> Swift.String
  @objc public func isLinear() -> Swift.Bool
  @objc public func getErrorCode() -> Swift.Int
  @objc public func getErrorMessage() -> Swift.String
  @objc public func getEventType() -> WISDK.WIAdEvent.AdEventType
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class WIStreamSource : ObjectiveC.NSObject {
  @objc final public let url: Foundation.URL?
  @objc final public let mineType: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@objc public class WIWebAction : ObjectiveC.NSObject {
  public enum TypeAction : Swift.String {
    case LOAD_CONFIG_SUCCESS, OVERLAY_VISIBILITY_CHANGE, USER_VOTED, USER_PURCHASE, TOKEN_EXPIRE, LOGIN, CLOSE_PROFILE_PAGE, DETAIL_VIDEO, DETAIL_CATEGORY, OVELAY_DISPLAY, START_OVERLAY, OVERLAY_COMPLETED, ADS_REQUEST_START, ADS_REQUEST_SUCCESS, ADS_REQUEST_ERROR, ADS_EVENT, UNKNOWN
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public init(payload: Swift.String)
  public func getType() -> WISDK.WIWebAction.TypeAction
  @objc override dynamic public init()
  @objc deinit
}
@objc public class WIOverlayData : ObjectiveC.NSObject {
  @objc public init(channelId: Swift.String?, streamId: Swift.String?, contentType: WISDK.WIOverlayData.ContentType, env: WISDK.WIOverlayData.Environment = Environment.PRODUCTION)
  @objc public init(channelId: Swift.String?, streamId: Swift.String?, contentType: WISDK.WIOverlayData.ContentType, platform: WISDK.WIOverlayData.Platform?, env: WISDK.WIOverlayData.Environment = Environment.PRODUCTION)
  @objc public init(channelId: Swift.String?, streamId: Swift.String?, thirdPartyToken: Swift.String?, contentType: WISDK.WIOverlayData.ContentType, accountId: Swift.Int, platform: WISDK.WIOverlayData.Platform?, env: WISDK.WIOverlayData.Environment = Environment.PRODUCTION)
  @objc public init(channelId: Swift.String?, streamId: Swift.String?, thirdPartyToken: Swift.String?, contentType: WISDK.WIOverlayData.ContentType, accountId: Swift.Int, platform: WISDK.WIOverlayData.Platform?, env: WISDK.WIOverlayData.Environment = Environment.PRODUCTION, timeoutSecond: Swift.Int = 0)
  @objc public init(type: WISDK.WIOverlayData.OverlayType, accountId: Swift.Int, thirdPartyToken: Swift.String?, env: WISDK.WIOverlayData.Environment = Environment.PRODUCTION)
  @objc public enum Environment : Swift.Int, Swift.RawRepresentable {
    case DEV, LOCAL, STAGING, SANDBOX, PRODUCTION
    public typealias RawValue = Swift.String
    public var rawValue: WISDK.WIOverlayData.Environment.RawValue {
      get
    }
    public init?(rawValue: WISDK.WIOverlayData.Environment.RawValue)
  }
  @objc @_hasMissingDesignatedInitializers public class Platform : ObjectiveC.NSObject {
    @objc override dynamic public init()
    @objc deinit
  }
  @objc public enum ContentType : Swift.Int, Swift.RawRepresentable {
    case VOD, LIVESTREAM
    public typealias RawValue = Swift.String
    public var rawValue: WISDK.WIOverlayData.ContentType.RawValue {
      get
    }
    public init?(rawValue: WISDK.WIOverlayData.ContentType.RawValue)
  }
  @objc public enum OverlayType : Swift.Int, Swift.RawRepresentable {
    case PROFILE, OVERLAY
    public typealias RawValue = Swift.String
    public var rawValue: WISDK.WIOverlayData.OverlayType.RawValue {
      get
    }
    public init?(rawValue: WISDK.WIOverlayData.OverlayType.RawValue)
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc public class WIConfigData : ObjectiveC.NSObject {
  @objc public var sources: [WISDK.WIStreamSource]?
  @objc final public let isVod: Swift.Bool
  public init(data: [Swift.String : Any]?)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class PassthroughView : UIKit.UIView {
  open var isUserGestureEnabled: Swift.Bool
  @objc override dynamic public func point(inside point: CoreGraphics.CGPoint, with event: UIKit.UIEvent?) -> Swift.Bool
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class WIOverlayView : WISDK.PassthroughView, WebKit.WKScriptMessageHandler, WebKit.WKNavigationDelegate, WebKit.WKUIDelegate, UIKit.UIScrollViewDelegate {
  open var mWebView: WebKit.WKWebView!
  open var currentOverlay: Swift.Int
  open var mWebViewError: Swift.Bool {
    get
    set
  }
  open var mWebViewReady: Swift.Bool {
    get
    set
  }
  @objc public func scrollViewWillBeginZooming(_ scrollView: UIKit.UIScrollView, with view: UIKit.UIView?)
  public func injectJavascript(javascript: Swift.String)
  @objc open func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
  @objc public func webView(_ webView: WebKit.WKWebView, didStartProvisionalNavigation navigation: WebKit.WKNavigation!)
  @objc public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @objc public func webView(_ webView: WebKit.WKWebView, didFail navigation: WebKit.WKNavigation!, withError error: Swift.Error)
  @objc public func webView(_ webView: WebKit.WKWebView, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  @objc public func webView(_ webView: WebKit.WKWebView, createWebViewWith configuration: WebKit.WKWebViewConfiguration, for navigationAction: WebKit.WKNavigationAction, windowFeatures: WebKit.WKWindowFeatures) -> WebKit.WKWebView?
  @objc public func webViewDidClose(_ webView: WebKit.WKWebView)
  public func clearAll()
  @objc deinit
}
extension WISDK.WIAdEvent.AdEventType : Swift.Equatable {}
extension WISDK.WIAdEvent.AdEventType : Swift.Hashable {}
extension WISDK.WIWebAction.TypeAction : Swift.Equatable {}
extension WISDK.WIWebAction.TypeAction : Swift.Hashable {}
extension WISDK.WIWebAction.TypeAction : Swift.RawRepresentable {}
extension WISDK.WIOverlayData.Environment : Swift.Equatable {}
extension WISDK.WIOverlayData.Environment : Swift.Hashable {}
extension WISDK.WIOverlayData.ContentType : Swift.Equatable {}
extension WISDK.WIOverlayData.ContentType : Swift.Hashable {}
extension WISDK.WIOverlayData.OverlayType : Swift.Equatable {}
extension WISDK.WIOverlayData.OverlayType : Swift.Hashable {}
